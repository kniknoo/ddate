crystal_doc_search_index_callback({"repository_name":"","body":"# ddate\n\nFind out the current day of the Discordian Calendar\n\n## Installation\n\nTODO: Write installation instructions here\n\n## Usage\n\n./discocal [Options] <YYYY MM DD>\n\n## Development\n\nTODO: Write development instructions here\n\n## Contributing\n\n1. Fork it (<https://github.com/your-github-user/ddate/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Nicholas Rake](https://github.com/kniknoo) - creator and maintainer\n","program":{"html_id":"/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[{"id":"fnord(day,color)-class-method","html_id":"fnord(day,color)-class-method","name":"fnord","doc":"Prints a message about the day provided. If it is St Tib's Day, Prints\na special message regarding the non-existance of the day. If the day is\na Holiday, a celebratory message is added. ","summary":"<p>Prints a message about the day provided.</p>","abstract":false,"args":[{"name":"day","doc":null,"default_value":"","external_name":"day","restriction":""},{"name":"color","doc":null,"default_value":"","external_name":"color","restriction":""}],"args_string":"(day, color)","source_link":null,"def":{"name":"fnord","args":[{"name":"day","doc":null,"default_value":"","external_name":"day","restriction":""},{"name":"color","doc":null,"default_value":"","external_name":"color","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if day.tibs_day?\n  puts(\"Today is St Tib's Day. It doesn't actually exist.\")\nelse\n  puts(\"Today is #{(day.day_of_week.colorize(:light_red)).toggle(color)}, the #{(day.day_of_month.colorize(:light_green)).toggle(color)}#{day.ordinal} day of #{(day.month.colorize(:light_blue)).toggle(color)} in the YOLD #{(day.year.colorize(:light_magenta)).toggle(color)}\")\nend\nif Ddate::DDate::HOLIDAYS.has_key?(day.day_of_year)\n  puts(\"Happy #{Ddate::DDate::HOLIDAYS[day.day_of_year]}!\")\nend\n"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"/Ddate","path":"Ddate.html","kind":"module","full_name":"Ddate","name":"Ddate","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"0.1.0\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"/Ddate/DDate","path":"Ddate/DDate.html","kind":"struct","full_name":"Ddate::DDate","name":"DDate","abstract":false,"superclass":{"html_id":"/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"DAYS","name":"DAYS","value":"[\"Sweetmorn\", \"Boomtime\", \"Pungenday\", \"Prickle-Prickle\", \"Setting Orange\"]","doc":null,"summary":null},{"id":"HOLIDAYS","name":"HOLIDAYS","value":"{5 => \"Mungday\", 50 => \"Chaoflux\", 78 => \"Mojoday\", 123 => \"Discoflux\", 151 => \"Syaday\", 196 => \"Confuflux\", 224 => \"Zaraday\", 269 => \"Bureflux\", 297 => \"Maladay\", 342 => \"Afflux\"}","doc":null,"summary":null},{"id":"MONTHS","name":"MONTHS","value":"[\"Chaos\", \"Discord\", \"Confusion\", \"Bureaucracy\", \"The Aftermath\"]","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"/Ddate","kind":"module","full_name":"Ddate","name":"Ddate"},"doc":"The DDate is the current day in the Discordian Calendar. A week is comprised of\nfive days. A months is comprised of 73 Days, and there are five in every year.\nThe Gregorian \"Leap Day\" is represented by St. Tib's Day. It is treated as a non-\nexistant day so that every year technically has 365 Days. The Year always starts\non a SweetMorn because 365 % 5 = 0. There is a Holiday on the 5th and 50th of\neach month. By default, #new will provide a Time.local instance but an arbitrary\ndate can be converted by providing *Time.new(YYYY MM DD)*","summary":"<p>The DDate is the current day in the Discordian Calendar.</p>","class_methods":[],"constructors":[{"id":"new(time=Time.local)-class-method","html_id":"new(time=Time.local)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"time","doc":null,"default_value":"Time.local","external_name":"time","restriction":""}],"args_string":"(time = <span class=\"t\">Time</span>.local)","source_link":null,"def":{"name":"new","args":[{"name":"time","doc":null,"default_value":"Time.local","external_name":"time","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(time)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"day_of_month-instance-method","html_id":"day_of_month-instance-method","name":"day_of_month","doc":"Returns the day of the Month","summary":"<p>Returns the day of the Month</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"day_of_month","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(@day_of_year % 73) == 0 ? 73 : @day_of_year % 73"}},{"id":"day_of_week-instance-method","html_id":"day_of_week-instance-method","name":"day_of_week","doc":"Returns the day of the week","summary":"<p>Returns the day of the week</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"day_of_week","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"DAYS[(@day_of_year - 1) % 5]"}},{"id":"day_of_year-instance-method","html_id":"day_of_year-instance-method","name":"day_of_year","doc":"Determines the day of the year. If it is past St. Tib's Day, the\nday of the year is one behind the Gregorian equivalent.","summary":"<p>Determines the day of the year.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"day_of_year","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"tibs_year? && @time.day_of_year > 60 ? @time.day_of_year - 1 : @time.day_of_year"}},{"id":"month-instance-method","html_id":"month-instance-method","name":"month","doc":"Returns the Month","summary":"<p>Returns the Month</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"month","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MONTHS[@day_of_year / 73]"}},{"id":"ordinal-instance-method","html_id":"ordinal-instance-method","name":"ordinal","doc":"Returns the ordinal suffix of the day of the Month","summary":"<p>Returns the ordinal suffix of the day of the Month</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"ordinal","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (11..13) === (day_of_month % 100)\n  return \"th\"\nend\ncase day_of_month % 10\nwhen 1\n  \"st\"\nwhen 2\n  \"nd\"\nwhen 3\n  \"rd\"\nelse\n  \"th\"\nend\n"}},{"id":"tibs_day?-instance-method","html_id":"tibs_day?-instance-method","name":"tibs_day?","doc":"Determines if the day is St Tib's Day. Returns a Bool.","summary":"<p>Determines if the day is St Tib's Day.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"tibs_day?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"tibs_year? && (@time.day_of_year == 60)"}},{"id":"tibs_year?-instance-method","html_id":"tibs_year?-instance-method","name":"tibs_year?","doc":"Determines if the year is a St Tib's Year. Returns a Bool.","summary":"<p>Determines if the year is a St Tib's Year.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"tibs_year?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(((@time.year % 4) == 0) && ((@time.year % 100) != 0)) || ((@time.year % 400) == 0)"}},{"id":"year-instance-method","html_id":"year-instance-method","name":"year","doc":"Returns the year","summary":"<p>Returns the year</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"year","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@time.year + 1166"}}],"macros":[],"types":[]}]}]}})